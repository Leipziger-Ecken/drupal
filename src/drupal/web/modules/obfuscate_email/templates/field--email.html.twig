{#
/**
 * @file
 * Theme override for a field.
 *
 * To override output, copy the "field.html.twig" from the templates directory
 * to your theme's directory and customize it, just like customizing other
 * Drupal templates such as page.html.twig or node.html.twig.
 *
 * Instead of overriding the theming for all fields, you can also just override
 * theming for a subset of fields using
 * @link themeable Theme hook suggestions. @endlink For example,
 * here are some theme hook suggestions that can be used for a field_foo field
 * on an article node type:
 * - field--node--field-foo--article.html.twig
 * - field--node--field-foo.html.twig
 * - field--node--article.html.twig
 * - field--field-foo.html.twig
 * - field--text-with-summary.html.twig
 * - field.html.twig
 *
 * Available variables:
 * - attributes: HTML attributes for the containing element.
 * - label_hidden: Whether to show the field label or not.
 * - title_attributes: HTML attributes for the title.
 * - label: The label for the field.
 * - multiple: TRUE if a field can contain multiple items.
 * - items: List of all the field items. Each item contains:
 *   - attributes: List of HTML attributes for each item.
 *   - content: The field item's content.
 * - entity_type: The entity type to which the field belongs.
 * - field_name: The name of the field.
 * - field_type: The type of the field.
 * - label_display: The display settings for the label.
 *
 * @see template_preprocess_field()
 */
#}
{% set field_name_class = field_name|clean_class %}
{% set classes = [
    'field',
    'field--' ~ entity_type|clean_class ~ '--' ~ field_name_class,
    'field--name-' ~ field_name|clean_class,
    'field--type-' ~ field_type|clean_class,
    'field--label-' ~ label_display,
    label_display == 'inline' ? 'clearfix',
  ]
%}
{% set title_classes = [
    'field__label',
    label_display == 'visually_hidden' ? 'visually-hidden',
  ]
%}

<div{{ attributes.addClass(classes) }}>
  {% if not label_hidden %}
    <div{{ title_attributes.addClass(title_classes) }}>{{ label }}</div>
  {% endif %}
  {% if multiple %}
    <div class="field__items">
  {% endif %}

  {# Custom logic to replace email string. Adjust to taste. #}
  {% for item in items %}
    <div{{ item.attributes.addClass('field__item') }}>
      {% if item.content['#title'] %}
        {% set mail_string = item.content['#title']|replace({'.': '/dot/', '@': '/at/'})|rot13() %}
        {# Render when email field is an anchor link. #}
        <a href="#" data-mail-to="{{ mail_string }}" target="_blank" data-replace-inner="">
          {% trans %}Email{% endtrans %}
        </a>
      {% elseif item.content['#context'].value %}
        {% set mail_string = item.content['#context'].value|replace({'.': '/dot/', '@': '/at/'})|rot13() %}
        {# Render when field is set to plain text. #}
        <span data-mail-to="{{ mail_string }}" data-replace-inner="@email">@email</span>
      {% else %}
        {# Fallback for the content output. #}
        {# This should not happen. #}
        {{ item.content }}
      {% endif %}
    </div>
  {% endfor %}

  {% if multiple %}
    </div>
  {% endif %}
</div>

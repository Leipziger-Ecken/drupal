<?php

use Drupal\Core\Form\FormStateInterface;
use Drupal\Views\ViewExecutable;

define('LE_CUSTOM_DATES', [
  'FUTURE' => 'future', // >= today
  'PAST' => 'past', // < today
  'NEXT_WEEK' => 'next_week', // > monday of next week
  'CUSTOM' => 'custom' // Use 'start'- &/ 'ende'-params from URI
]);

$GLOBALS['le_custom_date'] = LE_CUSTOM_DATES['FUTURE'];
$GLOBALS['le_custom_start'] = null;
$GLOBALS['le_custom_end'] = null;

/**
 * Implements template_preprocess_views_exposed_form().
 *
 * Adds custom date picker to event-form filter.
 */
function le_core_preprocess_views_exposed_form(&$variables) {
  if ($variables['form']['#id'] === 'views-exposed-form-le-view-events-page-1') {
    $custom_date = $GLOBALS['le_custom_date'];

    // Transform form API element into pure HTML. Will be skipped if '#markup'/'#printed' is already given on element
    // @see https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21Renderer.php/function/Renderer%3A%3Arender/8.2.x
    $startInput = \Drupal::service('renderer')->render($variables['form']['start']);
    $endInput = \Drupal::service('renderer')->render($variables['form']['ende']);

    // Uses #type => inline_template to avoid stripped HTML from use of #markup
    // @todo By default use english i18n strings, then translate into German via UI
    $custom_date_picker = [
      '#type' => 'inline_template',
      '#template' => '
        <div class="form-item form-type-select form-item-custom-date le-date-picker">
          <label for="le-date-picker__select" class="control-label">'. t('Datum'). '</label>

          <div class="select-wrapper">
            <select name="date" class="form-select form-control" id="le-date-picker__select">
              <option'. ($custom_date === LE_CUSTOM_DATES['FUTURE'] ? ' selected="selected"' : '') .' value="'. LE_CUSTOM_DATES['FUTURE'] .'">'. t('Ab heute') .'</option>
              <option'. ($custom_date === LE_CUSTOM_DATES['PAST'] ? ' selected="selected"' : '') .' value="'. LE_CUSTOM_DATES['PAST'] .'">'. t('Vergangene Events') .'</option>
              <option'. ($custom_date === LE_CUSTOM_DATES['NEXT_WEEK'] ? ' selected="selected"' : '') .' value="'. LE_CUSTOM_DATES['NEXT_WEEK'] .'">'. t('Ab nächster Woche') .'</option>'.
              ($custom_date === LE_CUSTOM_DATES['CUSTOM']
              ? '<option selected="selected" value="'. LE_CUSTOM_DATES['CUSTOM'] .'">'.
                  (!is_null($GLOBALS['le_custom_start'] && !empty(trim($GLOBALS['le_custom_start']))) ? $GLOBALS['le_custom_start'] . ' ' : t('Heute') . ' ') .
                  (!is_null($GLOBALS['le_custom_end'] && !empty(trim($GLOBALS['le_custom_end']))) ? '- '. $GLOBALS['le_custom_end'] : '') .
                '</option>'
              : '<option value="'. LE_CUSTOM_DATES['CUSTOM'] .'">'. t('Zeitraum eingeben') .'</option>'
              ).
            '</select>

            <div class="categories-select" data-id="le-date-picker">
              <div class="categories-select__options" data-level="1">
                <div class="categories-select__options__option'. ($custom_date === LE_CUSTOM_DATES['FUTURE'] ? ' selected' : '') .'" data-val="'. LE_CUSTOM_DATES['FUTURE'] .'">
                  <a href="#" title="'. t('Alle kommenden Events') .'">'. t('Ab heute') .'</a>
                </div>
                <div class="categories-select__options__option'. ($custom_date === LE_CUSTOM_DATES['PAST'] ? ' selected' : '') .'" data-val="'. LE_CUSTOM_DATES['PAST'] .'">
                  <a href="#" title="'. t('Alle vergangenen Events (aufsteigend)') .'">'. t('Vergangene Events') .'</a>
                </div>
                <div class="categories-select__options__option'. ($custom_date === LE_CUSTOM_DATES['NEXT_WEEK'] ? ' selected' : '') .'" data-val="'. LE_CUSTOM_DATES['NEXT_WEEK'] .'">
                  <a href="#" title="'. t('Alle Events ab Montag nächster Woche'). '">'. t('Ab nächster Woche') .'</a>
                </div>
                <div class="categories-select__options__option has-child'. ($custom_date === LE_CUSTOM_DATES['CUSTOM'] ? ' selected' : '') .'" data-val="'. LE_CUSTOM_DATES['CUSTOM'] .'">
                  <a href="#" title="'. t('Beliebigen Zeitraum eingeben') .'">'. t('Zeitraum eingeben') .'</a>
                  <div class="categories-select__options" data-level="2">
                    <div class="categories-select__options__option">
                      <a href="#" title="'. t('Startdatum eingeben') .'">
                        '. $startInput .'
                      </a>
                    </div>
                    <div class="categories-select__options__option">
                      <a href="#" title="'. t('Enddatum eingeben') .'">
                        '. $endInput .'
                      </a>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      '
    ];

    // Push custom date picker to previous start input, remove all internally computed inputs
    $variables['form']['start'] = $custom_date_picker;
    unset($variables['form']['sort_by']);
    unset($variables['form']['sort_order']);
    unset($variables['form']['ende']);

    // Attach UI handler
    $variables['form']['#attached']['library'][] = 'le_core/events-date-filter-picker';
  }
}

/**
 * Implements hook_views_pre_view().
 */
function le_core_views_pre_view(ViewExecutable $view, $display_id, array &$args) {

  if ($view->id() == 'le_view_events') {
    switch ($display_id) {
      case 'page_1':
        // Evaluate URI-params and programmatically override events-view-filter & sort.
        // Standard setting ("future"): All upcoming events, ascending.
        $start = null;
        $end = null;
        $sort_order = 'ASC';

        $filter_input = $view->getExposedInput();

        if (isset($filter_input['date']) && in_array($filter_input['date'], LE_CUSTOM_DATES)) {
          $GLOBALS['le_custom_date'] = $filter_input['date'];
        }

        switch ($GLOBALS['le_custom_date']) {
          default:
          case 'future':
            $start = date("Y-m-d");
            break;
          case 'past':
            $end = date("Y-m-d");
            $sort_order = 'DESC';
            break;
          case 'next_week':
            $start = date('Y-m-d', strtotime('next monday'));
            break;
          case 'custom':
            $start = $filter_input['start'];
            $end = $filter_input['ende'];

            if (empty($start)) {
              $sort_order = 'DESC';
            }
            break;
        }

        $GLOBALS['le_custom_start'] = $start;
        $GLOBALS['le_custom_end'] = $end;

        $view->setExposedInput(
          array_merge(
            $view->getExposedInput(),
            [
              'start' => $start,
              'ende' => $end, 
              'sort_by' => 'field_le_event_occurrences_value',
              'sort_order' => $sort_order
            ]
          )
        );

        break;
    }
  }
}

/**
 * Called on UI-change event of $field_{le_entity_type}_kategorie_typ.
 * Returns a renderable array that replaces the wrapper-container.
 */
function ajax_field_kategorie_typ_callback(&$form, FormStateInterface $form_state) {
  return isset($form['field_le_akteur_kategorie_subtyp']) ? $form['field_le_akteur_kategorie_subtyp'] : $form['field_le_event_kategorie_subtyp'];
}

function le_core_views_pre_render(\Drupal\views\ViewExecutable $view) {
  if ($view->id() === 'le_view_user_has_akteure') {
    // @todo Override link to Akteur by showing full Akteur name
  }

  if ($view->id() === 'le_view_akteure' || $view->id() === 'le_view_events') {
    // Attach custom, JS-based categories selector
    $view->element['#attached']['library'][] = 'le_core/categories-select';
  }
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function le_core_node_view(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
  if ($build['#view_mode'] == 'full') {
    // On any node detail page: Highlight active menu trails via JS
    // $build[#node] => Node
    $build['#attached']['library'][] = 'le_core/node-menu-enhancer';
  }
}

/**
 * Implements hook_menu_local_tasks_alter
 */
function le_core_menu_local_tasks_alter(&$data, $route_name)
{
  if ($route_name === 'entity.node.canonical' || $route_name === 'view.le_akteur_has_events.page_1' || $route_name === 'entity.node.edit_form') {
    // Context: node

    $tabs = $data['tabs'][0];

    if (isset($data['tabs'][0]) && isset($data['tabs'][0]['entity.node.canonical'])) {
      // Change first tab title from "Ansicht" to "Beschreibung"
      // $local_task_main_view = &$data['tabs'][0]['entity.node.canonical'];
      
      // TODO: this is very missleading
      // $local_task_main_view['#link']['title'] = 'Beschreibung';
    }

    /** @var \Drupal\node\Entity\Node $node */
    $node = \Drupal::routeMatch()->getParameter('node');

    if ($node && gettype($node) !== 'string' && $node->bundle() !== 'le_akteur') {
      // Only show "Akteur-has-events" view link on akteur nodes

      $data['tabs'][0]['view.le_akteur_has_events.page_1']['#access'] = FALSE;
      $data['tabs'][0]['view.projects.akteur_projects']['#access'] = FALSE;
      $data['tabs'][0]['view.blog.akteur_blog']['#access'] = FALSE;
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function le_core_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id = NULL)
{

  if (in_array($form_id, ['node_le_akteur_form','node_le_akteur_edit_form'])) {
    // set_kategorie_form_fields($form, $form_state, 'akteur');
    $form['#attached']['library'][] = 'le_core/categories-select';
    $form['#attached']['drupalSettings'] = [
      'le_categories_select_target' => '#edit-field-le-akteur-kategorie-typ'
    ];
    // kint($form);

    // Apply bootstrap grid
    // @todo Move into leipzigerEcken-theme
    /*
    $form['title']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_akteur_image']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_akteur_hat_typ']['#attributes']['class'][] = 'col-md-12';
    $form['field_le_akteur_description']['#attributes']['class'][] = 'col-md-12';
    $form['field_le_akteur_email']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_akteur_opening_times']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_akteur_phone']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_akteur_url']['#attributes']['class'][] = 'col-md-6';
    $form['field_bezirk']['#attributes']['class'][] = 'col-md-6';
    $form['field_adresse']['#attributes']['class'][] = 'col-md-12';
    $form['field_le_akteur_contactperson']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_akteur_contactperson_fn']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_akteur_einrichtungsname']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_akteur_kategorie_typ']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_akteur_kategorie_gruppe']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_akteur_kategorie_tags']['#attributes']['class'][] = 'col-md-12';
    $form['field_le_akteur_is_barrier_free']['#attributes']['class'][] = 'col-md-12';
    $form['field_le_akteur_lizenzhinweis']['#attributes']['class'][] = 'col-md-12';
    $form['actions']['#attributes']['class'][] = 'col-md-12';
    */
  }

  if (in_array($form_id, ['node_le_event_form','node_le_event_edit_form'])) {
    $form['#attached']['library'][] = 'le_core/event-form';
    $form['#attached']['library'][] = 'le_core/categories-select';
    $form['#attached']['drupalSettings'] = [
      'le_categories_select_target' => '#edit-field-le-event-kategorie-typ'
    ];

    // Get groups ("memberships") of active user
    $user_id = \Drupal::currentUser()->id();
    $full_user = \Drupal\user\Entity\User::load($user_id);
    $user_is_admin = $full_user->hasRole('administrator') || $user_id == 1;

    $membership_manager = \Drupal::service('og.membership_manager');
    $user_memberships = $membership_manager->getMemberships($user_id);

    // if (!count($user_memberships) && !$user_is_admin)
    // {
    //     \Drupal::messenger()->addError(t("Du musst mind. einem Akteur zugeordnet sein, um Events erstellen zu können"));
    //     $response = new RedirectResponse('/events');
    //     $response->send();
    //     return;
    // }

    // As long as recurrencies widget UI is not completed: Hide fields "mode" and "timezone"
    $field_occurrences_widget = &$form['field_le_event_occurrences']['widget'];

    foreach ($field_occurrences_widget as $key => $field_occurrence) {
        if (!is_numeric($key)) {
          continue;
        }

        $field_occurrences_widget[$key]['mode']['#attributes']['class'][] = 'hidden'; // #access = false would break JS behaviour :/
        $field_occurrences_widget[$key]['time_zone']['#access'] = false;
        $field_occurrences_widget[$key]['blakeks'] = [
            '#type' => 'checkbox',
            '#title' => 'blakeks',//$this->t('Whether to enable occurrences button'),
            '#default_value' => 1,
            '#description' => 'efw',
            '#weight' => -1,
          ];
    }

    // @todo When choosing Akteur, auto-fill-in address values from Akteur address, see #13
    $form['og_audience']['widget']['#type'] = 'select';

    $user_akteure = [];

    foreach ($user_memberships as $membership) {
      // Map memberships to actual akteure entity_id
      array_push($user_akteure, $membership->get('entity_id')->value);
    }

    if (!$user_is_admin) {
      if (isset($form['og_audience']['widget']['#options'])) {

        // Limit selection to owned Akteure
        foreach ($form['og_audience']['widget']['#options'] as $entity_id => $filtered_markup) {
          if ($entity_id == '_none') continue;

          if (!in_array($entity_id, $user_akteure)) {
              unset($form['og_audience']['widget']['#options'][$entity_id]);
          }
        }
      }
    }

    // Push "Private owner" at the top of og_audience select list
    $form['og_audience']['widget']['#options']['_none'] = '-- Private*r Veranstalter*in --';
    // array_unshift($form['og_audience']['widget']['#options'], '-- Private*r Veranstalter*in --');

    if (in_array($form_id, ['node_le_event_form'])) {
      // Add(!) event form

      if (count($user_memberships) === 0) {
        // Set "Privater Veranstalter" as default
        $form['og_audience']['widget']['#default_value'] = '0';
      } else if (count($user_memberships) >= 1) {
        // Set first akteur as default in select-list
        $default_akteur = $user_memberships[key($user_memberships)]->entity_id->value;
        $default_akteur = \Drupal\node\Entity\Node::load((int) $default_akteur);

        if ($default_akteur) {
          // @todo may be empty as memberships become not deleted on node.le_akteur delete :(
          $form['og_audience']['widget']['target_id']['#default_value'] = $default_akteur;
        }
      }
    }

    // Apply bootstrap grid
    // @todo Move into leipzigerEcken-theme
    /*
    $form['title']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_event_image']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_event_beschreibung']['#attributes']['class'][] = 'col-md-12';
    $form['field_le_event_website']['#attributes']['class'][] = 'col-md-6';
    $form['field_bezirk']['#attributes']['class'][] = 'col-md-6';
    $form['og_audience']['#attributes']['class'][] = 'col-md-6';
    $form['field_adresse']['#attributes']['class'][] = 'col-md-12';
    $form['field_le_event_kategorie_typ']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_event_kategorie_gruppe']['#attributes']['class'][] = 'col-md-6';
    $form['field_le_event_kategorie_tags']['#attributes']['class'][] = 'col-md-12';
    $form['field_le_event_is_barrier_free']['#attributes']['class'][] = 'col-md-12';
    $form['field_le_event_lizenzhinweis']['#attributes']['class'][] = 'col-md-12';
    $form['field_le_event_occurrences']['#attributes']['class'][] = 'col-md-12';
    $form['actions']['#attributes']['class'][] = 'col-md-12';
    */
  }
}

/**
 * --
 * Everything below @deprecated
 * --
 */

/**
 * Dynamically set the select options of $field_{le_entity_type}_kategorie_typ & - _subtyp based on user input.
 * ("Select one main category; select multiple second categories which are children of that main category")
 *
 * @deprecated Kategorie-field was turned into multiple-select and is now managed via dedicated "categories-select.js".
 * THERE IS NOT "SUBTYP"-FIELD ANYMORE!!!
 */
function set_kategorie_form_fields(&$form, FormStateInterface $form_state, $le_entity_type)
{

  $kategorie_typ_field = "field_le_${le_entity_type}_kategorie_typ";
  $kategorie_subtyp_field = "field_le_${le_entity_type}_kategorie_subtyp";

  // Get main category value based on context (default render || ajax request)
  $full_entity = $form_state->getFormObject()->getEntity();

  $field_kategorie_typ_default_value = $full_entity->get($kategorie_typ_field)->getValue();
  $field_kategorie_typ_ajax_value = $form_state->getValue($kategorie_typ_field);

  $field_kategorie_typ_value = null;

  if (isset($field_kategorie_typ_default_value[0])) {
    $field_kategorie_typ_value = (int) $field_kategorie_typ_default_value[0]['target_id'];
  }

  if (isset($field_kategorie_typ_ajax_value[0])) {
    $field_kategorie_typ_value = (int) $field_kategorie_typ_ajax_value[0]['target_id'];
  }

  $kategorien = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadTree('le_kategorie_typ');

  // Set main category select options
  $first_option_kategorien = [
    '_none' => '- Nicht ausgewählt -'
  ];

  foreach ($kategorien as $kategorie) {
    if ((int) $kategorie->parents[0] === 0) {
      $first_option_kategorien[$kategorie->tid] = $kategorie->name;
    }
  }

  $form[$kategorie_typ_field]['widget']['#options'] = $first_option_kategorien;
  $form[$kategorie_typ_field]['widget']['#ajax'] = array(
    'callback' => 'ajax_field_kategorie_typ_callback',
    'wrapper' => 'field-kategorie-subtyp-wrapper',
    'method' => 'replace',
    // 'effect' => 'fade',
  );

  // Set sub-category select options based on $field_kategorie_typ_value
  // @todo Eventually we wanna hide/disable this field completely as long as $field_kategorie_typ_value === NULL
  $second_option_kategorien = [
    '_none' => $field_kategorie_typ_value ? '- Nicht ausgewählt -' : '- Wähle zunächst Hauptkategorie -'
  ];

  if ($field_kategorie_typ_value) {
    foreach ($kategorien as $kategorie) {
      if ((int) $kategorie->parents[0] === $field_kategorie_typ_value) {
        $second_option_kategorien[$kategorie->tid] = $kategorie->name;
      }
    }
  }

  $form[$kategorie_subtyp_field]['widget']['#options'] = $second_option_kategorien;

  // Set wrapper in which output of ajax_field_kategorie_typ_callback() will be rendered into.
  $form[$kategorie_subtyp_field]['widget']['#prefix'] = '<div id="field-kategorie-subtyp-wrapper">';
  $form[$kategorie_subtyp_field]['widget']['#suffix'] = '</div>';
}

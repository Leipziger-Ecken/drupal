<?php

use Drupal\node\Entity\Node;
use Drupal\og\Entity\OgRole;
use Drupal\path_alias\Entity\PathAlias;
use Drupal\redirect\Entity\Redirect;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Implements hook_install
 */
function le_migrate_install()
{
    // Let's play a game... infinite server timeout or you will die... 3,2,1,...
    // ...Nah, just a joke. Better execute this manually!
    // le_migrate_path_alias();
    // le_migrate_users();
    // le_migrate_bezirke();
    // le_migrate_tags();
    // le_migrate_akteure();
    // le_migrate_events();
    // le_migrate_stadtteile();
    // le_migrate_zielgruppen();
    // le_migrate_kategorien();
}

/**
 * Provide smooth URI's for system-paths
 */
function le_migrate_path_alias()
{
    PathAlias::create([
      'path' => '/node/add/le_akteur',
      'alias' => '/akteure/neu',
    ])->save();

    PathAlias::create([
      'path' => '/node/add/le_event',
      'alias' => '/events/neu',
    ])->save();

    PathAlias::create([
      'path' => '/contact',
      'alias' => '/kontakt',
    ])->save();
}

function le_migrate_akteure()
{
    $directory = 'public://le/';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $database = \Drupal::database();

    $query = $database->query("
      SELECT * FROM aae_data_akteur as ak
      JOIN aae_data_akteur_hat_user as ahu
      JOIN aae_data_adresse as ad
      JOIN aae_data_bezirke as be
      WHERE ahu.hat_AID = ak.AID
        AND ad.ADID = ak.adresse
        AND be.BID = ad.bezirk");

    $akteure = $query->fetchAll();

    $membership_manager = \Drupal::service('og.membership_manager');
    $admin_role_id = 'node-le_akteur-administrator';
    $admin_role = OgRole::load($admin_role_id);

    $c = 0;

    foreach ($akteure as $akteur) {

      $created = time();

      if (!empty($akteur->created)) {
        $created = new DateTime($akteur->created);
        $created = $created->getTimestamp();
      }

      $valid_url = filter_var($akteur->url, FILTER_VALIDATE_URL);
      $image_name = basename($akteur->bild);
      $file = null;

      if (!empty(trim($akteur->bild))) {
        $image = file_get_contents("https://leipziger-ecken.de{$akteur->bild}");
        $file = file_save_data($image, $directory . $image_name, FILE_EXISTS_REPLACE);
      }

      $node = [
          'nid' => $akteur->AID,
          'type' => 'le_akteur',
          'title' => $akteur->name,
          'field_le_akteur_email' => $akteur->email,
          'field_le_akteur_phone' => $akteur->telefon,
          'field_le_akteur_url' => $valid_url ? $akteur->url : null,
          'field_le_akteur_description' => [
            'value' => $akteur->beschreibung,
            'format' => 'full_html',
          ],
          'field_le_akteur_contactperson' => $akteur->ansprechpartner,
          'field_le_akteur_contactperson_fn' => $akteur->funktion,
          'field_le_akteur_opening_times' => $akteur->oeffnungszeiten,
          'field_le_akteur_barrier_free' => $akteur->barrierefrei === 1,
          'field_adresse' => [
            'country_code' => 'DE',
            'address_line1' => $akteur->strasse . (!empty($akteur->nr) ? ' ' . $akteur->nr : ''),
            'address_line2' => $akteur->adresszusatz,
            'postal_code' => $akteur->plz,
            'locality' => 'Leipzig'
          ],
          'field_bezirk' => $akteur->BID,
          'created' => $created,
          'field_le_akteur_kategorie_tags' => [],
          'uid' => (int) $akteur->hat_UID // || $akteur->ersteller???
        ];

        if ($file) {
          $node['field_le_akteur_image'] = [
              'target_id' => $file->id(),
              'alt' => "Profilfoto Akteur ´{$akteur->name}´",
              'title' => "Profilfoto Akteur ´{$akteur->name}´"
          ];
        }

        /**
         * TAGS
         */
        $query = $database->query("
        SELECT kategorie FROM aae_data_sparte as s
        INNER JOIN aae_data_akteur_hat_sparte as ahs ON s.KID = ahs.hat_KID
        WHERE ahs.hat_AID = :aid", [':aid' => $akteur->AID]);

        $tags = $query->fetchAll();

        foreach ($tags as $tag) {
          $term = \Drupal::entityTypeManager()
                ->getStorage('taxonomy_term')
                ->loadByProperties(['vid' => 'le_kategorie_tags', 'name' => $tag->kategorie]);

          if (empty($term)) {
            continue;
          }

          $term = reset($term);
          $node['field_le_akteur_kategorie_tags'][] = $term->id();
        }

        $node = Node::create($node);
        $node->save();

        $nid = $node->id();

        /**
         * REDIRECT
         * Provide URI-backward-compatibility for SEO reasons
         */
        Redirect::create([
          'redirect_source' => "akteurprofil/{$akteur->AID}",
          'redirect_redirect' => "internal:/node/{$nid}",
          'language' => 'und',
          'status_code' => '301',
        ])->save();

        // $user = \Drupal\user\Entity\User::load((int) $akteur->hat_UID);

        try {
          // Flag akteur-user as group administrator.
          $membership = $membership_manager->getMembership($node, (int) $akteur->hat_UID);

          if (!$membership->hasRole($admin_role_id)) {
              echo "Added role for " . $akteur->AID;
              $membership->addRole($admin_role)->save();
          }

        } catch (Exception $e) {
          echo "Fehler: ",  $e->getMessage(), "\n";
        }

        $c++;
    }

    drupal_set_message(t("Successfully imported ${c} Akteure"));
}

function le_migrate_tags()
{
    $database = \Drupal::database();
    $query = $database->query("SELECT * FROM aae_data_sparte");
    $result = $query->fetchAll();

    $c = 0;

    foreach ($result as $tag) {
      if (!isset($tag->kategorie) || empty($tag->kategorie)) {
        continue;
      }

      Term::create([
        'parent' => [],
        'name' => $tag->kategorie,
        'vid' => 'le_kategorie_tags',
      ])->save();

      $c++;
  }

  drupal_set_message(t("Successfully imported ${c} tags"));
}

function le_migrate_bezirke()
{
    $database = \Drupal::database();
    $query = $database->query("SELECT * FROM aae_data_bezirke");
    $result = $query->fetchAll();

    $c = 0;

    foreach ($result as $bezirk) {
      Term::create([
        'tid' => $bezirk->BID,
        'parent' => [],
        'name' => $bezirk->bezirksname,
        'vid' => 'le_bezirk',
      ])->save();

      $c++;
    }

    drupal_set_message(t("Successfully imported ${c} bezirke"));
}

function le_migrate_events()
{
    $today = date("Y-m-d H:i:s");
    $directory = 'public://le/';
    file_prepare_directory($directory, FILE_CREATE_DIRECTORY);

    $database = \Drupal::database();

    // @todo Not yet concrete enough:
    $query = $database->query("
      SELECT * FROM aae_data_event as ev
      JOIN aae_data_adresse as ad
      JOIN aae_data_bezirke as be
      JOIN aae_data_akteur_hat_event as ahe
      WHERE ad.ADID = ev.ort
        AND be.BID = ad.bezirk
        AND ahe.EID = ev.EID
        AND ev.parent_EID IS NULL");

    //         AND ev.start_ts >= '${today}'

    $result = $query->fetchAll();

    $c = 0;

    foreach ($result as $event) {

      $created = time();

      if (!empty($event->created)) {
        $created = new DateTime($event->created);
        $created = $created->getTimestamp();
      }

      $valid_url = filter_var($event->url, FILTER_VALIDATE_URL);
      $image_name = basename($event->bild);
      $file = null;

      if (!empty(trim($event->bild))) {
        // \Drupal::logger('le_migrate')->notice("https://leipziger-ecken.de{$akteur->bild}");
        $image = file_get_contents("https://leipziger-ecken.de{$event->bild}");
        $file = file_save_data($image, $directory . $image_name, FILE_EXISTS_REPLACE);
      }

      $frequency = 0;

      /*switch ($event->recurring_event_type) {
        case 2:
          $frequency = 'WEEKLY';
        break;
        case 3:
          $frequency = 'WEEKLY;INTERVAL=2';
          break;
        case 4:
          $frequency = 'MONTHLY';
          break;
        case 5:
          $frequency = 'MONTHLY;INTERVAL=2';
          break;
      }*/

      $start = str_replace(' ', 'T', $event->start_ts);
      $ende = ($event->ende_ts === '1000-01-01 00:00:00' || $event->ende_ts === '1000-01-01 00:00:01') ? $start : str_replace(' ', ' ', $event->ende_ts);

      // @todo Fully skip recurring events (has parent)
      // @todo created_at -> Actually working?
      // @todo!!!! if ends 01 -> is recurring!

      $node = [
          'field_le_event___eid' => $event->EID,
          'type' => 'le_event',
          'title' => $event->name,
          'field_le_event_beschreibung' => [
            'value' => $event->kurzbeschreibung,
            'format' => 'full_html',
          ],
          'og_audience' => $event->AID,
          'field_adresse' => [
            'country_code' => 'DE',
            'address_line1' => $event->strasse . (!empty($event->nr) ? ' ' . $event->nr : ''),
            'address_line2' => $event->adresszusatz,
            'postal_code' => $event->plz,
            'locality' => 'Leipzig'
          ],
          'field_bezirk' => $event->BID,
          'field_le_event_occurrences' => [
            'value' => $start,
            'end_value' => $ende,
            'timezone' => 'Europe/Berlin',
            'rrule' => $frequency ? "RRULE:FREQ=${frequency}" : null,
            'infinite' => $frequency ? 1 : 0
          ],
          'created' => $created,
          'uid' => (int) $event->ersteller
        ];

        if ($file) {
          $node['field_le_event_image'] = [
              'target_id' => $file->id(),
              'alt' => "Bild Event ´{$event->name}´",
              'title' => "Bild Event ´{$event->name}´"
          ];
        }

        /**
         * TAGS
         */
        $query = $database->query("
        SELECT kategorie FROM aae_data_sparte as s
        INNER JOIN aae_data_event_hat_sparte as ehs ON s.KID = ehs.hat_KID
        WHERE ehs.hat_EID = :eid", [':eid' => $event->EID]);

        $tags = $query->fetchAll();

        foreach ($tags as $tag) {
          $term = \Drupal::entityTypeManager()
                ->getStorage('taxonomy_term')
                ->loadByProperties(['vid' => 'le_kategorie_tags', 'name' => $tag->kategorie]);

          if (empty($term)) {
            continue;
          }

          $term = reset($term);
          $node['field_le_event_kategorie_tags'][] = $term->id();
        }

        $node = Node::create($node);
        $node->save();

        $nid = $node->id();

        /**
         * REDIRECT
         * Provide URI-backward-compatibility for SEO reasons
         */
        Redirect::create([
          'redirect_source' => "eventprofil/{$event->EID}",
          'redirect_redirect' => "internal:/node/{$nid}",
          'language' => 'und',
          'status_code' => '301',
        ])->save();

        $c++;
    }

    drupal_set_message(t("Successfully imported ${c} events"));
}

/**
 * @thanks https://drupal.stackexchange.com/questions/209163/how-do-i-migrate-users-passwords
 * (But could have used default Migration Manager as well, just a question of code consistency...
 *  @see https://www.drupal.org/project/drupal/issues/2764287)
 *
 * Roles aae_data: 3 => Administrator; 4 => Redakteur; 5 => Akteur; 6 => Festival
 */
function le_migrate_users()
{
      $database = \Drupal::database();
      $query = $database->query("
        SELECT * FROM aae_data_users as us
        WHERE us.uid != 1
          AND us.status = 1");
      $users = $query->fetchAll();

      $query = $database->query("SELECT * FROM aae_data_users_roles");
      $roles = $query->fetchAll();

      $c = 0;

      foreach ($users as $user) {

        $newuser = User::create([
            'name' => $user->name,
            'pass' => $user->pass,
            'mail' => $user->mail,
            'status' => $user->status,
            'init' => $user->init,
            'created' => $user->created,
            'login' => $user->login,
            'access' => $user->access,
            'uid' => $user->uid,
        ]);

        $newuser->save();

        // dirty overwrite re-hashed hash
        $database->merge('users_field_data')
          ->fields(['pass' => $user->pass])
          ->keys(['uid' => $user->uid])
          ->execute();

        $c++;
    }

    // Assign roles
    foreach ($roles as $role) {

      $user = User::load($role->uid);

      if (!empty($user)) {
        if ($role->rid === '4') {
            $user->addRole('le_role_redakteur');
            $user->save();
        }
      }
    }

    drupal_set_message(t("Successfully imported ${c} users"));
}

/**
 * Add two default stadtteile, without linkage to bezirke
 */
function le_migrate_stadtteile()
{
    Term::create([
      'parent' => [],
      'name' => 'Osten',
      'vid' => 'le_region',
    ])->save();

    Term::create([
      'parent' => [],
      'name' => 'Norden',
      'vid' => 'le_region',
    ])->save();
}

/**
 * Add four default target groups
 */
function le_migrate_zielgruppen()
{
    Term::create([
      'parent' => [],
      'name' => 'Kinder',
      'vid' => 'le_kategorie_zielgruppe',
    ])->save();

    Term::create([
      'parent' => [],
      'name' => 'Jugendliche',
      'vid' => 'le_kategorie_zielgruppe',
    ])->save();

    Term::create([
      'parent' => [],
      'name' => 'Erwachsene',
      'vid' => 'le_kategorie_zielgruppe',
    ])->save();

    Term::create([
      'parent' => [],
      'name' => 'Senioren',
      'vid' => 'le_kategorie_zielgruppe',
    ])->save();
}

/**
 * Add some demo kategorien (un-nested)
 */
function le_migrate_kategorien()
{
    Term::create([
      'parent' => [],
      'name' => 'Kultur & Kreatives',
      'vid' => 'le_kategorie_typ',
    ])->save();

    Term::create([
      'parent' => [],
      'name' => 'Sport',
      'vid' => 'le_kategorie_typ',
    ])->save();
}

<?php
use Drupal\path_alias\Entity\PathAlias;
use \Drupal\Core\Form\FormStateInterface;
use Drupal\Component\Utility\Html;
use Drupal\views\Views;
use Drupal\block\Entity\Block;
use Drupal\Core\Session\AccountInterface;
use Drupal\node\NodeInterface;
use Drupal\Core\Access\AccessResult;

function le_webbuilder_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  if (in_array($form_id, [
    'node_webbuilder_page_form',
    'node_webbuilder_page_edit_form'
  ])) {
    _le_webbuilder_webbuilder_page_form_alter($form, $form_state, $form_id);
  }

  if (in_array($form_id, [
    'node_webbuilder_form',
    'node_webbuilder_edit_form',
  ])) {
    _le_webbuilder_webbuilder_form_alter($form, $form_state, $form_id);
  }

  if ($form_id === 'node_webbuilder_delete_form') {
    // add custom submit handler, to clone preset
    $form['actions']['submit']['#submit'][] = 'le_webbuilder_webbuilder_delete_submit';
  }

  if (in_array($form_id, ['media_unsplash_image_add_form', 'media_unsplash_image_edit_form'])) {
    _le_webbuilder_media_unsplash_image_form_alter($form, $form_state, $form_id);
  }
}

/**
* Provide smooth URI's for system-paths
*/
function le_webbuilder_path_alias()
{
  PathAlias::create([
    'path' => '/node/add/webbuilder',
    'alias' => '/webbuilders/neu',
  ])->save();

  PathAlias::create([
    'path' => '/node/add/project',
    'alias' => '/projects/neu',
  ])->save();

  PathAlias::create([
    'path' => '/node/add/sponsor',
    'alias' => '/sponsors/neu',
  ])->save();

  PathAlias::create([
    'path' => '/node/add/partner',
    'alias' => '/partners/neu',
  ])->save();

  PathAlias::create([
    'path' => '/node/add/blog_article',
    'alias' => '/blog-articles/neu',
  ])->save();
}

function _le_webbuilder_webbuilder_page_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  $form['#attached']['library'][] = 'le_webbuilder/webbuilder_page_form';

  // create form
  if ($form_id === 'node_webbuilder_page_form') {
    // hide webbuilder and og_audience fields
    $form['field_webbuilder']['#attributes']['class'][] = 'hidden';
    $form['og_audience']['#attributes']['class'][] = 'hidden';

    $webbuilder_id = \Drupal::request()->query->get('webbuilder');
    
    if ($webbuilder_id) {
      $webbuilder = \Drupal::entityManager()->getStorage('node')->load($webbuilder_id);
      if ($webbuilder) {
        $form['field_webbuilder']['widget']['#options'] = [];
        $form['field_webbuilder']['widget']['#options'][$webbuilder_id] = $webbuilder->title[0]->value;
        $form['field_webbuilder']['widget']['#default_value'] = $webbuilder_id;

        if (isset($webbuilder->og_audience[0])) {
          $akteur_id = $webbuilder->og_audience[0]->target_id;
          $form['og_audience']['widget']['#default_value'] = $akteur_id;
        }
      }
    }
  // edit form
  } else {
    // remove webbuilder and og_audience fields
    unset($form['field_webbuilder']);
    unset($form['og_audience']);
    
    $webbuilder_id = $form_state->getFormObject()->getEntity()->field_webbuilder[0]->target_id;

    if (!$webbuilder_id) {
      return;
    }

    $webbuilder = \Drupal::entityManager()->getStorage('node')->load($webbuilder_id);
    if (!$webbuilder) {
      return;
    }
    
    // load the page tree
    $form['field_parent']['widget']['#options'] = [];
    $view = Views::getView('webbuilder_pages');
    $view->setDisplay('entity_reference_page_tree');
    $view->setArguments([$webbuilder_id]);
    $result = $view->render();
    
    foreach($result as $nid => $row) {
      if (isset($row['#row']) && isset($row['#row']->_entity)) {
        $title = $row['#row']->_entity->title[0]->value;
        $_row = $row;
        
        while($_row !== null) {
          if ($_row && isset($_row['#row']->_entity->field_parent[0])) {
            $parent_id = $_row['#row']->_entity->field_parent[0]->target_id;
            $title = '- ' . $title;
            $_row = $result[$parent_id] ?? null;
          } else {
            $_row = null;
          }
        }
        $form['field_parent']['widget']['#options'][$nid] = $title;
      }
    }
  }
}

function _le_webbuilder_webbuilder_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  $user = \Drupal::currentUser();
  $roles = $user->getRoles();
  
  // remove preset field for regular users
  if (!in_array('le_role_redakteur', $roles) && !in_array('administrator', $roles)) {
    unset($form['field_is_preset']);
    unset($form['field_description']);
    unset($form['field_preview_image']);
    unset($form['fieldgroups']['group_preset']);
  }

  if ($form_id === 'node_webbuilder_edit_form') {
    $webbuilder = $form_state->getFormObject()->getEntity();
    if (!$webbuilder) {
      return;
    }
    $webbuilder_id = $webbuilder->id();

    $form['field_frontpage']['widget']['#options'] = [];

    // preload the page tree for the frontpage selection
    $view = Views::getView('webbuilder_pages');
    $view->setDisplay('entity_reference_page_tree');
    $view->setArguments([$webbuilder_id]);
    $result = $view->render();
    
    foreach($result as $nid => $row) {
      if (isset($row['#row']) && isset($row['#row']->_entity)) {
        $title = $row['#row']->_entity->title[0]->value;
        $_row = $row;
        
        while($_row !== null) {
          if ($_row && isset($_row['#row']->_entity->field_parent[0])) {
            $parent_id = $_row['#row']->_entity->field_parent[0]->target_id;
            $title = '- ' . $title;
            $_row = $result[$parent_id] ?? null;
          } else {
            $_row = null;
          }
        }
        $form['field_frontpage']['widget']['#options'][$nid] = $title;
      }
    }
  }
}

function _le_webbuilder_media_unsplash_image_form_alter(&$form, FormStateInterface $form_state, $form_id)
{
  $form['#attached']['library'][] = 'le_webbuilder/unsplash_media_form';
  $form['search'] = [
    '#type' => 'search',
    '#title' => t('Search images'),
    '#placeholder' => t('Enter search terms'),
    '#attributes' => [
      'data-results-target' => '#edit-field-unsplash-search-results',
      'data-url-target' => '#edit-field-media-remote-image-0-uri',
      'data-alt-target' => '#edit-field-media-remote-image-0-alt',
      'data-title-target' => '#edit-name-0-value',
      'data-attribution-target' => '#edit-field-attribution-0-value',
      'data-api-url' => '/webbuilder/unsplash-api-proxy',
      'oninput' => 'handleUnsplashSearchInput(this)',
      'autocomplete' => 'off',
    ],
    '#weight' => -100,
  ];
  $form['search_results'] = [
    '#type' => 'markup',
    '#markup' => '<div class="unsplash-results" id="edit-field-unsplash-search-results"></div>',
    '#weight' => -99,
  ];
  $form['image_preview'] = [
    '#type' => 'markup',
    '#markup' => '<figure class="unsplash-preview" id="edit-field-image-preview" data-url-source="#edit-field-media-remote-image-0-uri" data-alt-source="#edit-field-media-remote-image-0-alt"></figure>',
    '#weight' => -98,
  ];

  // hide attribution field, so user cannot enter values
  $form['field_attribution']['#attributes']['class'][] = 'hidden';
}

function le_webbuilder_webbuilder_delete_submit(array $form, FormStateInterface $form_state)
{
  $webbuilder = $form_state->getFormObject()->getEntity();
  if (!$webbuilder) {
    return;
  }

  // load pages
  $pages_query = \Drupal::entityQuery('node');
  $pages_query->condition('field_webbuilder', $webbuilder->id());
  $result = $pages_query->execute();
  foreach($result as $nid) {
    $page = \Drupal::entityManager()->getStorage('node')->load($nid);
    $page->delete();
  }
}

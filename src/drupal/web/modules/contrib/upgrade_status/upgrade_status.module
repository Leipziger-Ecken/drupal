<?php

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Extension\Extension;

/**
 * Implements hook_help().
 */
function upgrade_status_help($route_name, RouteMatchInterface $route_match) {
  if ($route_name == 'upgrade_status.report') {

    // If neither Composer Deploy nor Git Deploy are installed, suggest installing one.
    $deploy_help = '';
    $modules = \Drupal::service('extension.list.module')->getAllInstalledInfo();
    if (!isset($modules['git_deploy']) && !isset($modules['composer_deploy'])) {
      $deploy_help = ' ' . t('Install <a href=":composer_deploy">Composer Deploy</a> or <a href=":git_deploy">Git Deploy</a> as appropriate for more accurate custom vs. contributed categorization and better available update recommendations.', [':composer_deploy' => 'https://drupal.org/project/composer_deploy', ':git_deploy' => 'https://drupal.org/project/git_deploy']);
    }

    return '<p>' . t('Analyze your site\'s Drupal 9 readiness. Run the report to find out if there are detectable compatibility errors with the modules and themes installed on your site. <a href=":prepare">Read more about preparing your site for Drupal 9</a>.', [':prepare' => 'https://www.drupal.org/docs/9/how-to-prepare-your-drupal-7-or-8-site-for-drupal-9/prepare-a-drupal-8-site-for-drupal-9']) . $deploy_help . '</p>';
  }
}

/**
 * Implements hook_theme().
 */
function upgrade_status_theme($existing, $type, $theme, $path) {
  return [
    'upgrade_status_html_export' => [
      'variables' => [
        'projects' => [],
      ],
    ],
    'upgrade_status_ascii_export' => [
      'variables' => [
        'projects' => [],
      ],
    ],
    'upgrade_status_summary_counter' => [
      'variables' => [
        'summary' => [],
      ],
    ],
  ];
}

/**
 * Preprocess project list for HTML export.
 *
 * @param array $variables
 *   Array of template variables.
 */
function template_preprocess_upgrade_status_html_export(&$variables) {
  $projects = $variables['projects'];
  $types = ['custom', 'contrib'];
  foreach ($types as $type) {
    if (!empty($projects[$type])) {
      foreach ($projects[$type] as $key => $project) {
        $variables['projects'][$type][$key]['name'] = $projects[$type][$key]['#title'];
      }
    }
  }
}

/**
 * Preprocess project list for ASCII export.
 *
 * @param array $variables
 *   Array of template variables.
 */
function template_preprocess_upgrade_status_ascii_export(&$variables) {
  template_preprocess_upgrade_status_html_export($variables);
}

/**
 * Implements hook_system_info_alter().
 */
function upgrade_status_system_info_alter(array &$info, Extension $extension, $type) {
  // Always mark upgrade_status as a contrib project regardless of how it was
  // obtained. This makes testing the module results reliably consistent.
  if ($extension->getName() == 'upgrade_status') {
    $info['project'] = $extension->getName();
  }
}
